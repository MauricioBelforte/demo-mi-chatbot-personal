// server/server.js
import express from "express";
import dotenv from "dotenv";
import fetch from "node-fetch";
import path from "path";
import { fileURLToPath } from "url";
import fs from "fs/promises";

import { proveedores } from '../lib/proveedores.js';
import { modelosPorProveedor } from '../lib/modelosPorProveedor.js';

import { consultarModeloConOpenRouter, probandoSegundoModelo, probandoTercerModelo } from "../lib/consultasModelos.js";

import { chequearLimiteOpenRouter } from "../lib/estadoOpenRouter.js";

import { generarContexto } from "../lib/extraerContexto.js";

import { promptSistema, generarPromptUsuario } from "../lib/armarPrompts.js";


dotenv.config();
const app = express();
const port = process.env.PORT || 3000;
const __dirname = path.dirname(fileURLToPath(import.meta.url));

app.use(express.static(path.join(__dirname, "../public")));
app.use("/script", express.static(path.join(__dirname, "../script")));
app.use(express.json());

app.post("/api/chatbotApi", async (req, res) => {
    const mensajeDelUsuario = req.body.message;
    const contexto = await generarContexto(mensajeDelUsuario);
    const promptUsuario = generarPromptUsuario(contexto, mensajeDelUsuario);

    /*     // Cargamos trabajos.json
        let trabajos = [];
        try {
            const trabajosRaw = await fs.readFile(path.join(__dirname, "trabajos.json"), "utf-8");
            trabajos = JSON.parse(trabajosRaw);
        } catch (err) {
            console.error("Error al cargar trabajos.json:", err);
        }
    
    
    
        let perfil = {};
        try {
            const perfilRaw = await fs.readFile(path.join(__dirname, "sobremi.json"), "utf-8");
            perfil = JSON.parse(perfilRaw);
        } catch (err) {
            console.error("Error al cargar sobremi.json:", err);
        }
    
        // Cargamos sobremi.json
        const keywords = ["hola", "datos", "edad", "a√±os", "vive", "ciudad", "Belforte", "ubicacion", "mail",
            "ciudad", "pais", "provincia", "dedica", "trabaja", "trabajo", "creo", "hacer", "hace", "bueno",
            "mauricio", "qui√©n sos", "qui√©n es", "sobre vos", "sobre √©l", "profesion",
            "qui√©n es mauricio", "perfil de mauricio", "contacto", "contactar",
            "email", "linkedin", "github"];
    
        const keywordsFormacion = [
            "formacion", "estudios", "estudia", "estudio", "academico", "carrera", "universidad", "tecnico", "electricidad", "electronica", "electricista",
            "t√©cnico", "colegio", "escuela", "cursos", "capacitaci√≥n", "recibio", "matematica", "fisica", "quimica",
            "educacion", "t√≠tulo", "certificado", "certificacion",
            "bootcamp", "fullstack", "codo a codo", "platzi", "react", "react.js", "alura",
            "desaf√≠o latam", "microsoft", "scrum", "mouredev", "curriculum"
        ];
    
        // Este objetoTrabajo se lo declara aca para usar en el anteultimo else if, no tenia otra posibilidad por ahora 
        let objetoTrabajo;
    
        // Construimos un contexto a partir del mensaje del usuario
        let contexto = "";
    
        const mensajeDelUsuarioEnMinuscula = mensajeDelUsuario.toLowerCase();
    
        // Sobre trabajos
        if (mensajeDelUsuarioEnMinuscula.includes("trabajo") || mensajeDelUsuarioEnMinuscula.includes("proyecto")) {
            // map crea un arreglo de strings, y a ese arreglo se convierte en un solo string con join
            contexto = trabajos.map(trabajo => `- ${trabajo.titulo}: ${trabajo.descripcion}`).join("\n");
            // console.log(contexto);
            // Sobre tecnolog√≠as
        } else if (mensajeDelUsuarioEnMinuscula.includes("tecnolog")) {
            const techs = [...new Set(trabajos.flatMap(t => t.tecnologias))];
            contexto = `Tecnolog√≠as usadas por Mauricio Belforte: ${techs.join(", ")}`;
            // console.log(contexto);
    
            // Sobre Mauricio (nombre, experiencia, contacto, etc.)
        } else if (keywords.some(palabra => mensajeDelUsuarioEnMinuscula.toLowerCase().includes(palabra))) {
            contexto = `
            Nombre y Apellido: ${perfil.nombre}
            Edad: ${perfil.edad}
            Ubicaci√≥n de ciudad, provincia y Pais: ${perfil.ubicacion}
            Profesi√≥n: ${perfil.profesion}
            Sobre Mauricio Belforte: ${perfil.descripcion}
            Tecnolog√≠as que sabe utilizar: ${perfil.tecnologias.join(", ")}
            Email: ${perfil.email}
            LinkedIn: ${perfil.linkedin}
            GitHub: ${perfil.github}
                `;
            // console.log(contexto); 
        } else if (mensajeDelUsuarioEnMinuscula.includes("telefono") || mensajeDelUsuarioEnMinuscula.includes("celular")) {
            contexto = `Su numero de celular es 221-3030341 (Argentina)`
    
        } else if (keywordsFormacion.some(k => mensajeDelUsuarioEnMinuscula.toLowerCase().includes(k))) {
            contexto = `
        Formaci√≥n Acad√©mica:
        ‚Ä¢ Estudio Analista Programador Universitario en la UNLP - Pero actualmente se encuentra finalizando sus estudios en la UNPSJB (En curso)
        ‚Ä¢ Ingenier√≠a Electr√≥nica - UNLP (3 a√±os completados)
        ‚Ä¢ T√©cnico Electromec√°nico - Escuela Industrial N¬∞5 R√≠o Turbio (2004-2007)
    
        Formaci√≥n Complementaria:
        ‚Ä¢ Bootcamp Premium de Desarrollo Web Frontend (Abril 2025)
        ‚Ä¢ Programa Codo a Codo 4.0 - Full-Stack Developer Node.js (Sept 2024)
        ‚Ä¢ React.js - Platzi y Desaf√≠o Latam
        ‚Ä¢ Microsoft Certified: Azure Data Fundamentals (Marzo 2025)
        ‚Ä¢ Curso Profesional de JavaScript - C√≥digoFacilito
        ‚Ä¢ Bootcamp Bases de Datos en la Nube con Azure - C√≥digoFacilito
        ‚Ä¢ Talleres con Alura Latam, SoyLider.net, MoureDev y otros
    
        Conferencias y Jornadas:
        ‚Ä¢ CISL Software Libre
        ‚Ä¢ Festival FLISOL
        ‚Ä¢ Blockchain y Fintech UNLP
    
        Otros cursos:
        ‚Ä¢ Desarrollo Web Frontend - Facultad de Inform√°tica UNLP (2015)
        ‚Ä¢ Taller de Corel Draw - UNLP
        `;
            // console.log(contexto);
        } else if ((objetoTrabajo = trabajos.find(trabajo => mensajeDelUsuarioEnMinuscula.includes(trabajo.titulo.toLowerCase())))) {
            contexto = `Trabajo: ${objetoTrabajo.titulo}\nTecnolog√≠as: ${objetoTrabajo.tecnologias.join(", ")}\nDescripci√≥n: ${objetoTrabajo.descripcion}`;
    
        } else {
            // üß† √öltimo recurso: usar todo el contexto disponible
    
            const descripcion = perfil.descripcion || "No hay descripci√≥n disponible.";
            const tecnologias = perfil.tecnologias?.join(", ") || "Tecnolog√≠as no especificadas.";
            const contacto = `
    Email: <a href="mailto:${perfil.email}">${perfil.email}</a><br>
    LinkedIn: <a href="${perfil.linkedin}" target="_blank">${perfil.linkedin}</a><br>
    Tel√©fono: ${perfil.telefono || "No disponible"}<br>
    `;
    
            const trabajosHtml = trabajos.map(trabajo => `
    üß† <b>${trabajo.titulo}</b><br>
    ${trabajo.descripcion}<br><br>
    `).join("");
    
            contexto = `
    Sobre Mauricio Belforte:<br>
    ${descripcion}<br><br>
    
    Tecnolog√≠as que utiliza:<br>
    ${tecnologias}<br><br>
    
    Informaci√≥n de contacto:<br>
    ${contacto}<br>
    
    Experiencia laboral:<br>
    ${trabajosHtml}
      `;
            console.log("ultimo contexto", contexto);
        } 
    */

    // Construimos el system prompt din√°micamente
    /*    const promptSistema = `
   Respond√© en menos de 100 caracteres, en espa√±ol y con claridad.
    Sos un asistente virtual que brinda informaci√≥n precisa en tercera persona a posibles clientes, exclusivamente relacionada al Desarrollador Web Mauricio Belforte. Us√° tercera persona y tono informativo. No te atribuyes la informaci√≥n. 
    Us√° puntos y aparte con saltos de linea \n para separar frases en distintas l√≠neas. Las respuestas deben facilitar la lectura. 
    Si no encontras informacion en el contexto que responda el mensaje del usuario, responde solo con la siguiente frase: ‚ÄúNo me entrenaron para responder ese tipo de preguntas‚Äù.
   
   `;
   
       const generarPromptUsuario = (contexto, mensajeDelUsuario) =>
           `
   Contexto:\n${contexto}
   
   Si no encontr√°s una respuesta a la pregunta del usuario, gener√° un resumen breve del contexto, manteniendo la claridad y el tono informativo.
   
   Utilizando la parte √∫til del contexto, gener√° una respuesta en tercera persona que responda solo y √∫nicamente a la siguiente pregunta del usuario: ‚Äú${mensajeDelUsuario}‚Äù.
   
   Us√° puntos y aparte con saltos de l√≠nea (\\n) para facilitar la lectura. No respondas temas fuera del contexto, ni preguntas de la vida privada de nadie.
   `; */



    // Verific√°s el estado actual antes de decidir el proveedor
    const estado = await chequearLimiteOpenRouter();

    if (estado.degradado) {
        // Pod√©s usar Groq, Together o fallback t√©cnico
        /*Este return le responde al chatbotVisual sin la respuesta del modelo */
        return res.json({ respuesta: "‚ö†Ô∏è Usando modelo alternativo por l√≠mite de uso." });
    }


    //     const modelos = [
    //       "deepseek/deepseek-chat-v3-0324:free",                   // principal
    //        "mistralai/mistral-small-3.2-24b-instruct:free",              // respaldo 1
    //      "moonshotai/kimi-k2:free"                                     // respaldo 2
    //    ];


    // Si no est√° degradado, segu√≠s con OpenRouter
    const respuesta = await consultarModeloConOpenRouter(promptSistema, promptUsuario);
    res.json({ respuesta });

    /* 
    El objeto respuesta es el que llega al frontend cuando hacemos en chatbotVisual.js un fetch('/api/chatbotApi', { method: 'POST', body: ... }) y luego lo proces√°s con const data = await response.json();. 
    
    {
        "respuesta": "Texto generado por el modelo seg√∫n el contexto y la pregunta"
    }
    
    */
});







app.listen(port, () => console.log(`Servidor corriendo en http://localhost:${port}`));

